cat('<div class="scroll-table">')
kable(
r2_tabla,
caption = "Coeficiente $R^{2}$ de Raudenbush–Bryk (comparado con modelo nulo)",
digits  = 3,
align   = "lccc",
row.names = FALSE
)
cat('</div>')
# ── 4. Calcular y armar tabla ───────────────────────────────────────────
r2_tabla <- map2_dfr(
mods_ml[-1],                           # todos excepto el nulo
names(mods_ml)[-1],                    # nombres
~ {
out <- r2_rb(.x)
tibble(
Modelo   = .y,
R2_L1    = round(out$R2_L1,  3),
R2_L2    = round(out$R2_L2,  3),
R2_Total = round(out$R2_Tot, 3)
)
}
)
# ── 1. Ajustar modelos en ML y SIN pendientes aleatorias ────────────────
mods_ml <- list(
"m0  (Nulo/ICC)"    = update(m0,        REML = FALSE) %>% update(. ~ 1 + (1 | comuna)),
"m1  (L1 centrado)" = update(m1,        REML = FALSE) %>% update(. ~ 1 + female + nse_cmc + part_social_num                      + (1 | comuna)),
"m2  (L2 centrado)" = update(m2,        REML = FALSE) %>% update(. ~ 1 + prop_empleo_gmc + idh_gmc + prop_pob_esc_gmc           + (1 | comuna)),
"m3  (L1 + L2)"     = update(m3,        REML = FALSE) %>% update(. ~ 1 + female + nse_cmc + part_social_num +
prop_empleo_gmc + idh_gmc + prop_pob_esc_gmc                + (1 | comuna)),
"m4  (+ Pend. NSE)" = update(m4,        REML = FALSE) %>% update(. ~ 1 + female + nse_cmc + part_social_num +
prop_empleo_gmc + idh_gmc + prop_pob_esc_gmc                + (1 | comuna)),
"m5  (+ Int. H7)"   = update(m5_H6,     REML = FALSE) %>% update(. ~ 1 + nse_cmc * prop_empleo_gmc +
part_social_num + female + prop_pob_esc_gmc                 + (1 | comuna)),
"m6  (+ Int. H8)"   = update(m6_H7,     REML = FALSE) %>% update(. ~ 1 + nse_cmc * idh_gmc +
part_social_num + female + prop_empleo_gmc + prop_pob_esc_gmc +
(1 | comuna))
)
m0_ml <- mods_ml[[1]]   # modelo nulo de referencia
# ── 2. Función para R² RB (argumentos posicionales) ─────────────────────
r2_rb <- function(mod) {
out <- misty::multilevel.r2(m0_ml, mod, print = "RB", output = FALSE)
tibble(
R2_L1    = round(out$R2_L1,  3),
R2_L2    = round(out$R2_L2,  3),
R2_Total = round(out$R2_Tot, 3)
)
}
# ── 3. Calcular y armar tabla (m0 queda con NA) ─────────────────────────
r2_tabla <- bind_rows(
tibble(Modelo = names(mods_ml)[1], R2_L1 = NA, R2_L2 = NA, R2_Total = NA),
imap_dfr(mods_ml[-1], ~r2_rb(.x) %>% mutate(Modelo = .y))
)
# ── 1. Ajustar modelos en ML y SIN pendientes aleatorias ────────────────
# ── 1. Modelos refiteados en ML, SOLO intercepto aleatorio ──────────────
mods <- list(
"m0  (Nulo/ICC)"    = update(m0,        REML = FALSE) %>% update(. ~ 1 + (1 | comuna)),
"m1  (L1 centrado)" = update(m1,        REML = FALSE) %>% update(. ~ 1 + female + nse_cmc + part_social_num                      + (1 | comuna)),
"m2  (L2 centrado)" = update(m2,        REML = FALSE) %>% update(. ~ 1 + prop_empleo_gmc + idh_gmc + prop_pob_esc_gmc           + (1 | comuna)),
"m3  (L1 + L2)"     = update(m3,        REML = FALSE) %>% update(. ~ 1 + female + nse_cmc + part_social_num +
prop_empleo_gmc + idh_gmc + prop_pob_esc_gmc                + (1 | comuna)),
"m4  (+ Pend. NSE)" = update(m4,        REML = FALSE) %>% update(. ~ 1 + female + nse_cmc + part_social_num +
prop_empleo_gmc + idh_gmc + prop_pob_esc_gmc                + (1 | comuna)),
"m5  (+ Int. H7)"   = update(m5_H6,     REML = FALSE) %>% update(. ~ 1 + nse_cmc * prop_empleo_gmc +
part_social_num + female + prop_pob_esc_gmc                 + (1 | comuna)),
"m6  (+ Int. H8)"   = update(m6_H7,     REML = FALSE) %>% update(. ~ 1 + nse_cmc * idh_gmc +
part_social_num + female + prop_empleo_gmc + prop_pob_esc_gmc +
(1 | comuna))
)
# ── 2. Varianzas del modelo nulo (referencia) ───────────────────────────
sigma0  <- sigma(mods[[1]])^2
tau00_0 <- as.numeric(VarCorr(mods[[1]])$comuna[1])
# ── 3. Función para calcular R2 RB manualmente ──────────────────────────
calc_rb <- function(mod) {
sig2  <- sigma(mod)^2
tau00 <- as.numeric(VarCorr(mod)$comuna[1])
tibble(
R2_L1    = round(1 - sig2              / sigma0,               3),
R2_L2    = round(1 - tau00            / tau00_0,              3),
R2_Total = round(1 - (sig2 + tau00)  / (sigma0 + tau00_0),    3)
)
}
# ── 4. Construir tabla completa ─────────────────────────────────────────
r2_tabla <- imap_dfr(mods, ~calc_rb(.x) %>% mutate(Modelo = .y)) %>%
relocate(Modelo)
# ── 5. Mostrar tabla scrollable ─────────────────────────────────────────
cat('<div class="scroll-table">')
kable(
r2_tabla,
caption = "Coeficiente $R^{2}$ de Raudenbush–Bryk (comparado con modelo nulo)",
digits  = 3, align = "lccc", row.names = FALSE
)
cat('</div>')
source("D:/U/Multivariada/trabajo1-grupo-3/procesamiento/3_interración.R")
rb_r2 <- function(null_mod, mod, label){
## Extraer componentes σ² y τ00
get_vars <- function(m){
vc <- as.data.frame(VarCorr(m))
sigma2 <- vc$vcov[vc$grp == "Residual"]
tau00  <- vc$vcov[vc$grp != "Residual" & vc$var1 == "(Intercept)"]
c(sigma2 = sigma2, tau00 = tau00)
}
v0 <- get_vars(null_mod)
vf <- get_vars(mod)
r2_l1 <- (v0["sigma2"] - vf["sigma2"]) / v0["sigma2"]
r2_l2 <- (v0["tau00"]  - vf["tau00"])  / v0["tau00"]
tibble(Modelo = label,
R2_L1  = round(r2_l1, 3),
R2_L2  = round(r2_l2, 3))
}
#tabla ----------------------------------------------
tabla_rb <- purrr::map2_dfr(          # ← prefijo explícito
.x = list(m1, m2, m3, m4, m5_H6, m6_H7),
.y = c("L1", "L2", "L1+L2", "+ Pend. NSE", "+ H7", "+ H8"),
~ rb_r2(null_mod = m0, mod = .x, label = .y)
)
print(tabla_rb)
rm(list = ls()) # para limpiar el entorno de trabajo
casen_educ <- readRDS("output/casen_educ.rds")
# CENTRADO DE VARIABLES --------------------------------------------------------
# ─────────────────  CMC para NSE individual  ─────────────────
casen_educ <- casen_educ %>%
group_by(comuna) %>%
mutate(
mean_nse_comuna = mean(nse_numerico, na.rm = TRUE),
nse_cmc         = nse_numerico - mean_nse_comuna
) %>%
ungroup()
# ─────────────────  GMC para variables comunales  ─────────────────
casen_educ <- casen_educ %>%
mutate(
prop_empleo_gmc = prop_empleo - mean(prop_empleo, na.rm = TRUE),
prop_pob_esc_gmc  = prop_pob_esc  - mean(prop_pob_esc,  na.rm = TRUE),
idh_gmc  = idh_comuna  - mean(idh_comuna,  na.rm = TRUE),
)
###############################################################################
# Modelo 0: nulo / ICC ---------------------------------------------------------
m0 <- lmer(esc ~ 1 + (1 | comuna), data = casen_educ)
# Modelo 1: solo predictores nivel 1 ------------------------------------------
m1 <- lmer(
esc ~ 1 + female + nse_cmc + part_social_num +
(1 | comuna),
data = casen_educ
)
# Modelo 2: solo predictores nivel 2 ------------------------------------------
m2 <- lmer(
esc ~ 1 + prop_empleo_gmc + prop_pob_esc_gmc + idh_gmc +
(1 | comuna),
data = casen_educ
)
screenreg(
list("Conextuales" = m2),
stars  = c(0.001, 0.01, 0.05),
digits = 3
)
# Modelo 3: fijos L1 + L2 ------------------------------------------------------
m3 <- lmer(
esc ~ 1 + female + nse_cmc + part_social_num +
prop_empleo_gmc + prop_pob_esc_gmc + idh_gmc +
(1 | comuna),
data = casen_educ
)
# Modelo 4: pendiente aleatoria para NSE (ya estimado) -------------------------
m4 <- lmer(
esc ~ 1 + female + nse_cmc + part_social_num +
prop_empleo_gmc + prop_pob_esc_gmc + idh_gmc +         # efectos fijos
(1 + nse_cmc | comuna),                     # intercepto + pendiente NSE
data = casen_educ
)
# Modelo 5-H6: interacción L1 × L2 SOLO para H6 -------------------------------
m5_H6 <- lmer(
esc ~ 1 +
nse_cmc         * prop_empleo_gmc +    # H6 (se mantiene)
part_social_num +                     # efecto principal (sin interacción)
prop_pob_esc_gmc +                      # efecto principal contextual
female +
(1 + nse_cmc | comuna),
data = casen_educ
)
m6_H7 <- lmer(
esc ~ 1 +
nse_cmc         * idh_gmc +           # ← NUEVA interacción H7
part_social_num +                     # efecto principal (sin interacción)
prop_empleo_gmc +                     # efecto contextual
prop_pob_esc_gmc +                      # efecto contextual
female +
(1 + nse_cmc | comuna),               # pendiente aleatoria para NSE
data = casen_educ,
control = lmerControl(
optimizer = "bobyqa",
optCtrl   = list(maxfun = 1e5)        # para estabilidad si fuera necesario
)
)
mods_ml <- list(
m0  = update(m0,        REML = FALSE),
m1  = update(m1,        REML = FALSE),
m2  = update(m2,        REML = FALSE),
m3  = update(m3,        REML = FALSE),
m4  = update(m4,        REML = FALSE),
m5  = update(m5_H6,     REML = FALSE),
m6  = update(m6_H7,     REML = FALSE)
)
# ── 2. Varianzas del modelo nulo (referencia) ───────────────────────────
sigma0  <- sigma(mods[[1]])^2
mods_ml <- list(
m0  = update(m0,        REML = FALSE),
m1  = update(m1,        REML = FALSE),
m2  = update(m2,        REML = FALSE),
m3  = update(m3,        REML = FALSE),
m4  = update(m4,        REML = FALSE),
m5  = update(m5_H6,     REML = FALSE),
m6  = update(m6_H7,     REML = FALSE)
)
# ── 2. Varianzas del modelo nulo (referencia) ───────────────────────────
sigma0  <- sigma(mods[[1]])^2
mods <- list(
m0  = update(m0,        REML = FALSE),
m1  = update(m1,        REML = FALSE),
m2  = update(m2,        REML = FALSE),
m3  = update(m3,        REML = FALSE),
m4  = update(m4,        REML = FALSE),
m5  = update(m5_H6,     REML = FALSE),
m6  = update(m6_H7,     REML = FALSE)
)
# ── 2. Varianzas del modelo nulo (referencia) ───────────────────────────
sigma0  <- sigma(mods[[1]])^2
tau00_0 <- as.numeric(VarCorr(mods[[1]])$comuna[1])
# ── 3. Función para calcular R2 RB manualmente ──────────────────────────
calc_rb <- function(mod) {
sig2  <- sigma(mod)^2
tau00 <- as.numeric(VarCorr(mod)$comuna[1])
tibble(
R2_L1    = round(1 - sig2              / sigma0,               3),
R2_L2    = round(1 - tau00            / tau00_0,              3),
R2_Total = round(1 - (sig2 + tau00)  / (sigma0 + tau00_0),    3)
)
}
# ── 4. Construir tabla completa ─────────────────────────────────────────
r2_tabla <- imap_dfr(mods, ~calc_rb(.x) %>% mutate(Modelo = .y)) %>%
relocate(Modelo)
# ── 5. Mostrar tabla scrollable ─────────────────────────────────────────
cat('<div class="scroll-table">')
kable(
r2_tabla,
caption = "Coeficiente $R^{2}$ de Raudenbush–Bryk (comparado con modelo nulo)",
digits  = 3, align = "lccc", row.names = FALSE
)
# ---------------------------------------------------------------
# 0. Cargar paquetes y base de datos ----------------------------
# ---------------------------------------------------------------
library(lme4)          # modelos multinivel
library(influence.ME)  # Cook's distance por grupo
library(dplyr)         # manipulación de datos
library(forcats)       # fct_drop
library(sjPlot)        # tab_model
library(broom.mixed)   # tidy() para lmer
#-------------------------------------------------------------------------------
saveRDS(casen_educ, file = "output/casen_educ_cen.rds")
casen_educ_cen <- readRDS("output/casen_educ_cen.rds") %>%
filter(!is.na(comuna)) %>%                # asegura no haber NAs
mutate(comuna = as.factor(comuna))        # comuna como factor
stopifnot(nlevels(casen_educ_cen$comuna) == 32)  # debe haber 32 comunas
# ---------------------------------------------------------------
# 1. Modelo original (m4) ---------------------------------------
# ---------------------------------------------------------------
m4 <- lmer(
esc ~ female + nse_cmc + part_social_num +
prop_empleo_gmc + n_escuelas_gmc +
(1 + nse_cmc | comuna),
data = casen_educ_cen
)
casen_educ_cen <- readRDS("output/casen_educ_cen.rds") %>%
filter(!is.na(comuna)) %>%                # asegura no haber NAs
mutate(comuna = as.factor(comuna))        # comuna como factor
stopifnot(nlevels(casen_educ_cen$comuna) == 32)  # debe haber 32 comunas
# ────────────────────────────────────────────────────────────────────────
# 1. Modelo original (m4) ‒ con nuevas variables contextuales
# ────────────────────────────────────────────────────────────────────────
m4 <- lmer(
esc ~ female + nse_cmc + part_social_num +
prop_empleo_gmc + prop_pob_esc_gmc + idh_gmc +
(1 + nse_cmc | comuna),
data = casen_educ_cen
)
# ────────────────────────────────────────────────────────────────────────
# 2. Cook’s Distance por comuna
# ────────────────────────────────────────────────────────────────────────
infl_m4   <- influence(m4, group = "comuna")
cook_vals <- cooks.distance(infl_m4, sort = FALSE)
# añade nombres si faltan
if (is.null(names(cook_vals)) || length(names(cook_vals)) == 0) {
names(cook_vals) <- levels(casen_educ_cen$comuna)
}
k      <- nlevels(casen_educ_cen$comuna)   # 32
cutoff <- 4 / k                            # ≈ 0.125
influentes <- names(cook_vals)[!is.na(cook_vals) & cook_vals > cutoff]
cat("Comunas influyentes (Cook >", round(cutoff, 3), "):\n")
print(influentes)
# ────────────────────────────────────────────────────────────────────────
# 3. Gráfico de Cook
# ────────────────────────────────────────────────────────────────────────
plot(
infl_m4, which = "cook",
cutoff  = cutoff, sort = TRUE,
xlab    = "Cook's distance", ylab = "Comuna",
main    = "Distancia de Cook – Influencia por comuna (modelo m4)"
)
# ────────────────────────────────────────────────────────────────────────
# 4. Modelo recortado (m4_trim) sin comunas influyentes
# ────────────────────────────────────────────────────────────────────────
casen_trim <- casen_educ_cen %>%
filter(!comuna %in% influentes) %>%
mutate(comuna = fct_drop(comuna))
m4_trim <- lmer(
esc ~ female + nse_cmc + part_social_num +
prop_empleo_gmc + prop_pob_esc_gmc + idh_gmc +
(1 + nse_cmc | comuna),
data  = casen_trim,
REML  = FALSE
)
cat("\nNúmero de comunas en m4_trim:\n")
print(summary(m4_trim)$ngrps)
# ────────────────────────────────────────────────────────────────────────
# 5. Comparación de efectos fijos (tabla)
# ────────────────────────────────────────────────────────────────────────
tab_model(
m4, m4_trim,
dv.labels = c("Modelo original", "Sin comunas influyentes"),
show.ci   = FALSE, p.style = "stars", digits = 3
)
# ────────────────────────────────────────────────────────────────────────
# 6. Cambio porcentual de coeficientes
# ────────────────────────────────────────────────────────────────────────
orig <- broom.mixed::tidy(m4,      effects = "fixed") %>%
select(term, estimate) %>% rename(est_orig = estimate)
trim <- broom.mixed::tidy(m4_trim, effects = "fixed") %>%
select(term, estimate) %>% rename(est_trim = estimate)
left_join(orig, trim, by = "term") %>%
mutate(delta_pct = 100 * (est_trim - est_orig) / abs(est_orig)) %>%
arrange(desc(abs(delta_pct))) %>%
print(n = Inf)
# ────────────────────────────────────────────────────────────────────────
# 3. Gráfico de Cook
# ────────────────────────────────────────────────────────────────────────
plot(
infl_m4, which = "cook",
cutoff  = cutoff, sort = TRUE,
xlab    = "Cook's distance", ylab = "Comuna",
main    = "Distancia de Cook – Influencia por comuna (modelo m4)"
)
# ────────────────────────────────────────────────────────────────────────
# 6. Cambio porcentual de coeficientes
# ────────────────────────────────────────────────────────────────────────
orig <- broom.mixed::tidy(m4,      effects = "fixed") %>%
select(term, estimate) %>% rename(est_orig = estimate)
trim <- broom.mixed::tidy(m4_trim, effects = "fixed") %>%
select(term, estimate) %>% rename(est_trim = estimate)
left_join(orig, trim, by = "term") %>%
mutate(delta_pct = 100 * (est_trim - est_orig) / abs(est_orig)) %>%
arrange(desc(abs(delta_pct))) %>%
print(n = Inf)
# ────────────────────────────────────────────────────────────────────────
# 5. Comparación de efectos fijos (tabla)
# ────────────────────────────────────────────────────────────────────────
tab_model(
m4, m4_trim,
dv.labels = c("Modelo original", "Sin comunas influyentes"),
show.ci   = FALSE, p.style = "stars", digits = 3
)
# ────────────────────────────────────────────────────────────────────────
# 3. Gráfico de Cook
# ────────────────────────────────────────────────────────────────────────
plot(
infl_m4, which = "cook",
cutoff  = cutoff, sort = TRUE,
xlab    = "Cook's distance", ylab = "Comuna",
main    = "Distancia de Cook – Influencia por comuna (modelo m4)"
)
# ────────────────────────────────────────────────────────────────────────
# 6. Cambio porcentual de coeficientes
# ────────────────────────────────────────────────────────────────────────
orig <- broom.mixed::tidy(m4,      effects = "fixed") %>%
select(term, estimate) %>% rename(est_orig = estimate)
trim <- broom.mixed::tidy(m4_trim, effects = "fixed") %>%
select(term, estimate) %>% rename(est_trim = estimate)
left_join(orig, trim, by = "term") %>%
mutate(delta_pct = 100 * (est_trim - est_orig) / abs(est_orig)) %>%
arrange(desc(abs(delta_pct))) %>%
print(n = Inf)
pacman::p_load(
lme4,
influence.ME,   # Cook & DFBETAS para modelos mixtos
dplyr,
broom.mixed,    # tidy() para lmer
knitr           # kable() si quieres tabladf
)
# ────────────────────────────────────
# 1. Modelo con intercepto + pendiente aleatoria NSE
# ────────────────────────────────────
m4 <- lmer(
esc ~ female + nse_cmc + part_social_num +
prop_empleo_gmc + prop_pob_esc_gmc + idh_gmc +
(1 + nse_cmc | comuna),
data = casen_educ_cen
)
# ────────────────────────────────────
# 2. Cook’s Distance por comuna
# ────────────────────────────────────
infl_m4   <- influence(m4, group = "comuna")
cook_vals <- cooks.distance(infl_m4)
k      <- nlevels(casen_educ_cen$comuna)   # Nº de comunas
cutoff <- 4 / k
comunas_influentes <- names(cook_vals)[cook_vals > cutoff]
cat("Comunas influyentes (Cook >", round(cutoff, 3), "):\n")
print(comunas_influentes)
# (gráfico opcional)
plot(infl_m4, which = "cook", cutoff = cutoff, sort = TRUE,
main = "Distancia de Cook por comuna – modelo m4")
# ────────────────────────────────────
# 3. DFBETAS por parámetro
# ────────────────────────────────────
dfb <- as.data.frame(dfbetas(infl_m4))              # todas las betas
thr <- 2 / sqrt(k)                                  # punto de corte
# Filtra comunas que sobrepasan el umbral para ALGÚN beta
dfb_long <- dfb |>
tibble::rownames_to_column("comuna") |>
tidyr::pivot_longer(-comuna, names_to = "beta", values_to = "dfb") |>
filter(abs(dfb) > thr)
cat("\nComunas con DFBETAS > ", round(thr, 3), " en algún beta:\n")
print(dfb_long |> arrange(desc(abs(dfb))))
# (gráfico opcional para variables seleccionadas)
plot(infl_m4, which = "dfbetas",
parameters = c("nse_cmc", "prop_empleo_gmc", "idh_gmc"),
xlab = "DFBETAS", ylab = "Comuna")
# (gráfico opcional para variables seleccionadas)
plot(infl_m4, which = "dfbetas",
parameters = c("nse_cmc", "prop_empleo_gmc", "idh_gmc"),
xlab = "DFBETAS", ylab = "Comuna")
# (gráfico opcional para variables seleccionadas)
plot(infl_m4, which = "dfbetas",
parameters = c("nse_cmc", "prop_empleo_gmc", "idh_gmc"),
xlab = "DFBETAS", ylab = "Comuna")
cat("\nComunas con DFBETAS > ", round(thr, 3), " en algún beta:\n")
# Filtra comunas que sobrepasan el umbral para ALGÚN beta
dfb_long <- dfb |>
tibble::rownames_to_column("comuna") |>
tidyr::pivot_longer(-comuna, names_to = "beta", values_to = "dfb") |>
filter(abs(dfb) > thr)
cat("\nComunas con DFBETAS > ", round(thr, 3), " en algún beta:\n")
print(dfb_long |> arrange(desc(abs(dfb))))
# (gráfico opcional para variables seleccionadas)
plot(infl_m4, which = "dfbetas",
parameters = c("nse_cmc", "prop_empleo_gmc", "idh_gmc"),
xlab = "DFBETAS", ylab = "Comuna")
# ────────────────────────────────────
# 4. Re-estimar modelo sin comunas influyentes (opcional)
# ────────────────────────────────────
casen_trim <- casen_educ_cen |> filter(!comuna %in% comunas_influentes)
m4_trim <- update(m4, data = casen_trim, REML = FALSE)
# Tablar resultados y comparar coeficientes
knitr::kable(
dplyr::left_join(
broom.mixed::tidy(m4,      effects = "fixed") |> select(term, beta_orig = estimate),
broom.mixed::tidy(m4_trim, effects = "fixed") |> select(term, beta_trim = estimate),
by = "term"
) |>
mutate(delta_pct = 100 * (beta_trim - beta_orig) / abs(beta_orig)),
caption = "Cambio porcentual de betas tras remover comunas influyentes",
digits = 3
)
# Filtra comunas que sobrepasan el umbral para ALGÚN beta
dfb_long <- dfb |>
tibble::rownames_to_column("comuna") |>
tidyr::pivot_longer(-comuna, names_to = "beta", values_to = "dfb") |>
filter(abs(dfb) > thr)
# Filtra comunas que sobrepasan el umbral para ALGÚN beta
dfb_long <- dfb |>
tibble::rownames_to_column("comuna") |>
tidyr::pivot_longer(-comuna, names_to = "beta", values_to = "dfb") |>
filter(abs(dfb) > thr)
cat("\nComunas con DFBETAS > ", round(thr, 3), " en algún beta:\n")
print(dfb_long |> arrange(desc(abs(dfb))))
# ─────────────────────────  H6: NSE × Tasa de empleo  ─────────────────────────
p_h6 <- plot_model(
m5_H6,
type  = "int",
terms = c("nse_cmc", "prop_empleo_gmc")
) +
labs(
title  = "Interacción H6: NSE individual × Tasa de empleo comunal",
x      = "NSE centrado en la comuna (CMC)",
y      = "Años esperados de escolaridad",
colour = "Tasa de empleo comunal\n(GMC; −1 DE / Media / +1 DE)"
) +
theme_minimal(base_size = 12)
print(p_h6)
# ─────────────────────────  H7: NSE × IDH ─────────────────────────
p_h8 <- plot_model(
m6_H7,
type  = "int",
terms = c("nse_cmc", "idh_gmc")   # usa el nombre real de tu var. IDH
) +
labs(
title  = "Interacción H8: NSE individual × IDH comunal",
x      = "NSE centrado en la comuna (CMC)",
y      = "Años esperados de escolaridad",
colour = "IDH comunal\n(GMC; −1 DE / Media / +1 DE)"
) +
theme_minimal(base_size = 12)
print(p_h8)
knitr::include_graphics(here::here("input", "img", "Años_de_escolaridad_final.png"))
knitr::include_graphics(here::here("input", "img", "Años_de_escolaridad_final.png"))
